#encoding:utf-8

# This file was *autogenerated* from the file Coppersmith_howgrave_univariate.sage
from sage.all_cmdline import *   # import sage library

_sage_const_7 = Integer(7); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_0p5 = RealNumber('0.5'); _sage_const_2 = Integer(2)
from sage.all import *
import time

def coppersmith_howgrave_univariate(pol, modulus, beta, mm, tt, XX):

    dd = pol.degree()
    nn = dd * mm + tt

    if not _sage_const_0  < beta <= _sage_const_1 :
        raise ValueError("beta should belongs in (0, 1]")

    if not pol.is_monic():
        raise ArithmeticError("Polynomial must be monic.")

    polZ = pol.change_ring(ZZ)
    x = polZ.parent().gen()

    gg = []
    for ii in range(mm):
        for jj in range(dd):
            gg.append((x * XX)**jj * modulus**(mm - ii) * polZ(x * XX)**ii)
    for ii in range(tt):
        gg.append((x * XX)**ii * polZ(x * XX)**mm)
    
    BB = Matrix(ZZ, nn)

    for ii in range(nn):
        for jj in range(ii+_sage_const_1 ):
            BB[ii, jj] = gg[ii][jj]

    BB = BB.LLL()
 
    new_pol = _sage_const_0 
    for ii in range(nn):
        new_pol += x**ii * BB[_sage_const_0 , ii] / XX**ii

    potential_roots = new_pol.roots()
    print "\npotential roots:", potential_roots

    roots = []
    for root in potential_roots:
        if root[_sage_const_0 ].is_integer():
            roots.append(ZZ(root[_sage_const_0 ]))
    return roots


N = input('N->')
p_part = input('p_part->')

F = PolynomialRing(Zmod(N), implementation='NTL', names=('x',)); (x,) = F._first_ngens(1); 
pol = x - p_part
dd = pol.degree()

beta = _sage_const_0p5                            
epsilon = beta / _sage_const_7                     
mm = ceil(beta**_sage_const_2  / (dd * epsilon))   
tt = floor(dd * mm * ((_sage_const_1 /beta) - _sage_const_1 ))  
XX = ceil(N**((beta**_sage_const_2 /dd) - epsilon))

start_time = time.time()
roots = coppersmith_howgrave_univariate(pol, N, beta, mm, tt, XX)

print "\n# Solutions"
print [(p_part-root) for root in roots]
print("in: %s seconds " % (time.time() - start_time))

